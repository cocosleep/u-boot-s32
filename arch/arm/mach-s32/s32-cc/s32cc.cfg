/*
 * Copyright 2022-2024 NXP
 * SPDX-License-Identifier:	GPL-2.0+
 *
 * Refer doc/README.s32ccimage for more details about how-to configure
 * and create a boot image for SoC's part of S32 Common Chassis family
 *
 */

#define __ASSEMBLER__
#include <config.h>

#ifdef CONFIG_QSPI_BOOT
#  define BOOT_STORAGE qspi
#else
#  define BOOT_STORAGE sd
#endif

#ifdef CONFIG_SPI_FLASH_MACRONIX
#define PATH_QSPI_PARAMS_FILE qspi_params_MX25UW51245G.bin
#endif

#ifdef CONFIG_SPI_FLASH_STMICRO
#define PATH_QSPI_PARAMS_FILE qspi_params_MT35XU512ABA.bin
#endif

/**
 * Boot device: sd/qspi
 */
BOOT_FROM	BOOT_STORAGE

/**
 * HSE FW support
 */
#ifdef CONFIG_NXP_HSE_SUPPORT
HSE_FW CONFIG_NXP_HSE_FW_FILE
#endif

/**
 * Device Configuration Data (DCD)
 */

/**
 * Write and checks
 *
 * Each entry must have the format:
 * Command      Addr-type      Address      Value/Mask      [Count]
 *
 * where:
 *	Command: WRITE, CLEAR_MASK, SET_MASK,
 *	         CHECK_MASK_CLEAR, CHECK_MASK_SET, CHECK_NOT_MASK, CHECK_NOT_CLEAR,
 *	         NOP
 *	Addr-type Register length (1,2 or 4 bytes)
 *	Address   Absolute address of the register
 *	Value     Value to be stored in the register
 *	Count     Optional poll count argument for CHECK_* commands.
 *		  By default, all CHECK_* commands will poll indefinitely until
 *		  the exit condition is met. For a finite value, 'Count' argument
 *		  must be used.
 *
 * Commands interpretation:
 *	WRITE:            *Address = Value
 *	CLEAR_MASK:       *Address &= ~Value
 *	SET_MASK:         *Address |= Value
 *	CHECK_MASK_CLEAR: *Address & Mask == 0
 *	CHECK_MASK_SET:   *Address & Mask == Mask
 *	CHECK_NOT_MASK:   *Address & Mask != Mask
 *	CHECK_NOT_CLEAR:  *Address & Mask != 0
 *
 * Examples:
 *	DCD WRITE 0x4 0x45235400 0x40
 *	DCD CLEAR_MASK 0x4 0x45165400 0x3
 *	DCD SET_MASK 0x4 0x45165400 0x3
 *	DCD CHECK_NOT_MASK 0x4 0x45165400 0x3 0x200
 *	DCD CHECK_NOT_MASK 0x4 0x45165400 0x3
 *
 */

/**
 * Enable VDD_EFUSE, so that HSE can read SYS_IMG.
 * VDD_EFUSE is disabled by default on s32gxxxa-rdb boards
 * and s32g399asom board.
 */
#ifdef CONFIG_NXP_S32GRDB_BOARD
/**
 * MSCR25: SRE= 111b and OBE = 1b
 * GPDO25 = 1
 */
DCD WRITE 0x4 0x4009c2a4 0x21c000
DCD WRITE 0x1 0x4009d31a 0x1

#elif NXP_S32GALPHA_BOARD
/**
 * MSCR25: SRE= 111b and OBE = 1b;
 * GPDO25 = 1
 */
DCD WRITE 0x4 0x4009c2a4 0x21c000
DCD WRITE 0x1 0x4009d31a 0x1

#elif CONFIG_TARGET_S32G399ASOM
/**
 * MSCR23: SRE= 111b and OBE = 1b
 * GPDO23 = 1
 */
DCD WRITE 0x4 0x4009c29c 0x21c000
DCD WRITE 0x1 0x4009d314 0x1
#endif

#if defined(CONFIG_ERR051257_WORKAROUND)
/**
 * ERR051257 workaround.
 * Configure PD01 and PF14 pins as GPIO.
 * The QSPI boot sequence will hang if QSPI_INTx pin transitions low during
 * boot.
 */

DCD WRITE 0x4 0x4009cafc 0x0
DCD WRITE 0x4 0x4009c304 0x00010000
DCD WRITE 0x4 0x4009cad4 0x0
DCD WRITE 0x4 0x4009c3b8 0x00010000
#endif

/**
 * Include QSPI configuration.
 *
 * It will be used by BootROM to load Bootloader's images.
 */
#if defined(CONFIG_QSPI_BOOT) && !defined(CONFIG_TARGET_TYPE_S32CC_EMULATOR)
QSPI_PARAMS_FILE	PATH_QSPI_PARAMS_FILE
#endif

/**
 * Enable workaround for ERR051257 erratum.
 */
#if defined(CONFIG_ERR051257_WORKAROUND)
ERR051257_WORKAROUND
#endif

/**
 * Areas of SRAM reserved by BootROM according to the
 * Reset and Boot: Boot: Program Image section of the Reference Manual,
 * while taking into account the fact that SRAM is mirrored at 0x3800_0000.
 */

#ifndef CONFIG_QSPI_BOOT
#if defined(CONFIG_ARCH_S32G3)
RSRVD_SRAM 0x34008000 0x34079c00
RSRVD_SRAM 0x38008000 0x38079c00
RSRVD_SRAM 0x34002000 0x34003000
RSRVD_SRAM 0x38002000 0x38003000
#else
RSRVD_SRAM 0x34008000 0x34078000
RSRVD_SRAM 0x38008000 0x38078000
RSRVD_SRAM 0x343ff000 0x34400000
RSRVD_SRAM 0x383ff000 0x38400000
#endif
#endif
